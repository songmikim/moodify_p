plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'xyz.moodf'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'net.coobird:thumbnailator:0.4.20'
	implementation 'org.springframework.boot:spring-boot-starter-mail'


	// ModelMapper
	implementation 'org.modelmapper:modelmapper:3.2.3'

	// Thymeleaf Extras & Layout
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	// HTTP Client & OpenAPI
	implementation 'org.apache.httpcomponents.client5:httpclient5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

	// QueryDSL (JPA)
	implementation      'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'

	// Jakarta Annotations & JPA API
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// Lombok
	compileOnly         'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Runtime Drivers
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Testing
	testImplementation  'org.springframework.boot:spring-boot-starter-test'
	testImplementation  'org.springframework.security:spring-security-test'
	testRuntimeOnly     'com.h2database:h2'
	testRuntimeOnly     'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}